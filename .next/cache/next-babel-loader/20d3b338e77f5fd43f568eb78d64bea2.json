{"ast":null,"code":"var _jsxFileName = \"/Users/jera/projetos/lol-boots/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect } from 'react';\nimport GlobalStyles from '../src/styles/GlobalStyles';\nimport \"../config/i18n\";\nimport \"isomorphic-fetch\";\nexport default function MyApp({\n  Component,\n  pageProps\n}) {\n  useEffect(() => {// jQuery(document).ready(function($) {\n    //   setTimeout(function() {\n    //     runNetworkAnim();\n    //   }, 500);\n    //   var resizeTimeout;\n    //   window.onresize = function() {\n    //     clearTimeout(resizeTimeout);\n    //     resizeTimeout = setTimeout(runNetworkAnim, 500);\n    //   }\n    //   // convert hex to rgb\n    //   function convertHex(hex,opacity){\n    //       hex = hex.replace('#','');\n    //       let r = parseInt(hex.substring(0,2), 16);\n    //       let g = parseInt(hex.substring(2,4), 16);\n    //       let b = parseInt(hex.substring(4,6), 16);\n    //       let result = 'rgba('+r+','+g+','+b+','+opacity/100+')';\n    //       return result;\n    //   }\n    //   var currentGlobalID = -1;\n    //   function runNetworkAnim() {\n    //     var currentScopeID = ++currentGlobalID;\n    //     var canvas = document.querySelector(\"#network\");\n    //     canvas.width = canvas.clientWidth;\n    //     canvas.height = canvas.clientHeight;\n    //     // Only run if canvas is over x px\n    //     //if (canvas.width > 100) {\n    //       var ctx = canvas.getContext(\"2d\");\n    //       var MAIN_COLOR = \"#ffffff\",\n    //           MAIN_COLOR_RGB = convertHex(MAIN_COLOR,0.5),\n    //           SEC_COLOR = \"#ffffff\",\n    //           BORDER_COLOR = \"#ffffff\",\n    //           LINE_ALPHA = 100,\n    //           NUM_BALLS = 100, // higher is less\n    //           BALL_RAD = 6, //3\n    //           BALL_RAD_MIN = 2,\n    //           SPEED = 0.3,\n    //           GLOB_ALPHA = 0.5,\n    //           MOUSE_RAD = 100,\n    //           CONN_DIST = 100,\n    //           FPS = 60;\n    //       var TAU = 2 * Math.PI;\n    //       let times = [];\n    //       let requestId = '';\n    //       function loop() {\n    //         if (currentGlobalID === currentScopeID ) {\n    //           ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //           update();\n    //           draw();\n    //           requestId = requestAnimationFrame(loop);\n    //         }\n    //       }\n    //       function stopAnimation(e) {\n    //           cancelAnimationFrame(requestId);\n    //       }\n    //       function Ball (startX, startY, startVelX, startVelY) {\n    //         this.x = startX || Math.random() * canvas.width;\n    //         this.y = startY || Math.random() * canvas.height;\n    //         this.vel = {\n    //           x: startVelX || Math.random() * SPEED * 2 - SPEED,\n    //           y: startVelY || Math.random() * SPEED *2 - SPEED\n    //         };\n    //         this.update = function(canvas) {\n    //           if (this.x > canvas.width + 50 || this.x < -50) {\n    //             this.vel.x = -this.vel.x;\n    //           }\n    //           if (this.y > canvas.height + 50 || this.y < -50) {\n    //             this.vel.y = -this.vel.y;\n    //           }\n    //           this.x += this.vel.x;\n    //           this.y += this.vel.y;\n    //         };\n    //         this.draw = function(ctx, can) {\n    //           ctx.beginPath();\n    //           var distM = distMouse(this);\n    //           if (distM > MOUSE_RAD) {\n    //             ctx.fillStyle = MAIN_COLOR;\n    //             ctx.globalAlpha =  GLOB_ALPHA;\n    //             ctx.arc((0.5 + this.x) | 0, (0.5 + this.y) | 0, BALL_RAD_MIN, 0, TAU, false);\n    //           } else {\n    //             ctx.fillStyle = SEC_COLOR;\n    //             ctx.strokeStyle= BORDER_COLOR;\n    //             ctx.globalAlpha = 1;\n    //             var BALL_RAD_DYN = (distM > CONN_DIST ? BALL_RAD_MIN : BALL_RAD * (1 - distM / CONN_DIST))\n    //             ctx.arc((0.5 + this.x) | 0, (0.5 + this.y) | 0, BALL_RAD_DYN, 0, TAU, false);\n    //             ctx.stroke();\n    //           }\n    //           ctx.fill();\n    //         }\n    //       }\n    //       var balls = [];\n    //       for (var i = 0; i < canvas.width * canvas.height / (NUM_BALLS*NUM_BALLS); i++) {\n    //         balls.push(new Ball(Math.random() * canvas.width, Math.random() * canvas.height));\n    //       }\n    //       var lastTime = Date.now();\n    //       function update() {\n    //         var diff = Date.now() - lastTime;\n    //         for (var frame = 0; frame * 16.6667 < diff; frame++) {\n    //           for (var index = 0; index < balls.length; index++) {\n    //             balls[index].update(canvas);\n    //           }\n    //         }\n    //         lastTime = Date.now();\n    //       }\n    //       var mouseX = -1e9, mouseY = -1e9;\n    //       document.addEventListener('mousemove', function(event) {\n    //         mouseX = event.clientX;\n    //         mouseY = event.clientY;\n    //       });\n    //       function distMouse(ball) {\n    //         return Math.hypot(ball.x - mouseX, ball.y - mouseY);\n    //       }\n    //       function draw() {\n    //         for (var index = 0; index < balls.length; index++) {\n    //           var ball = balls[index];\n    //           ctx.beginPath();\n    //           for (var index2 = balls.length - 1; index2 > index; index2 += -1) {\n    //             var ball2 = balls[index2];\n    //             var dist = Math.hypot(ball.x - ball2.x, ball.y - ball2.y);\n    //               if (dist < CONN_DIST) {\n    //                 var distM = distMouse(ball2);\n    //                 var line_alp = 1-(dist/CONN_DIST);\n    //                 if (distM > MOUSE_RAD) {\n    //                   ctx.strokeStyle = MAIN_COLOR;\n    //                   ctx.globalAlpha =  ctx.globalAlpha = 1 - (dist > CONN_DIST ? .8 : dist / CONN_DIST);\n    //                 } else {\n    //                   //ctx.fillStyle = 'rgba(255,0,0,1)';\n    //                   ctx.strokeStyle = SEC_COLOR;\n    //                   ctx.globalAlpha = 1;\n    //                 }\n    //                 ctx.moveTo((0.5 + ball.x) | 0, (0.5 + ball.y) | 0);\n    //                 ctx.lineTo((0.5 + ball2.x) | 0, (0.5 + ball2.y) | 0);\n    //               }\n    //             }\n    //           ctx.stroke();\n    //           ball.draw(ctx, canvas);\n    //         }\n    //       }\n    //       // Start\n    //       loop();\n    //     //}\n    //     var runNetworkAnimObj = new Object()\n    //     runNetworkAnimObj.stopAnimation = stopAnimation\n    //     return runNetworkAnimObj \n    //   }\n    //   let Multi = new runNetworkAnim();\n    // });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(GlobalStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }), __jsx(\"script\", {\n    src: \"https://www.paypal.com/sdk/js?currency=BRL&client-id=AYrqjWQGJpRF3h0xRqck1VBpNzs-wW7VIMVs0gj9lbXDGQ6VWxXH1tqGkLKZNQ4LbX6bLvf6YcvLFemj\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, \" // Required. Replace SB_CLIENT_ID with your sandbox client ID.\"), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Lato:300,400|Montserrat:700\",\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/jera/projetos/lol-boots/pages/_app.js"],"names":["useEffect","GlobalStyles","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,gBAAP;AACA,OAAO,kBAAP;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAEtDJ,EAAAA,SAAS,CAAC,MAAM,CACdvKQ,EAuKN,EAvKM,CAAT;AAyKA,SACA,4BACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,GAAG,EAAC,uIADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEAFF,EAKE;AAAM,IAAA,IAAI,EAAC,qEAAX;AAAiF,IAAA,GAAG,EAAC,YAArF;AAAkG,IAAA,IAAI,EAAC,UAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME,MAAC,SAAD,eAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANF,CADA;AAUD","sourcesContent":["import { useEffect } from 'react';\nimport GlobalStyles from '../src/styles/GlobalStyles';\n\nimport \"../config/i18n\";\nimport \"isomorphic-fetch\";\n\nexport default function MyApp({ Component, pageProps }) {\n\n  useEffect(() => {\n    // jQuery(document).ready(function($) {\n\n    //   setTimeout(function() {\n    //     runNetworkAnim();\n    //   }, 500);\n    \n    //   var resizeTimeout;\n    //   window.onresize = function() {\n    //     clearTimeout(resizeTimeout);\n    //     resizeTimeout = setTimeout(runNetworkAnim, 500);\n    //   }\n    \n    //   // convert hex to rgb\n    //   function convertHex(hex,opacity){\n    //       hex = hex.replace('#','');\n    //       let r = parseInt(hex.substring(0,2), 16);\n    //       let g = parseInt(hex.substring(2,4), 16);\n    //       let b = parseInt(hex.substring(4,6), 16);\n    \n    //       let result = 'rgba('+r+','+g+','+b+','+opacity/100+')';\n    //       return result;\n    //   }\n    \n    //   var currentGlobalID = -1;\n    \n    //   function runNetworkAnim() {\n    //     var currentScopeID = ++currentGlobalID;\n    //     var canvas = document.querySelector(\"#network\");\n    //     canvas.width = canvas.clientWidth;\n    //     canvas.height = canvas.clientHeight;\n    \n    //     // Only run if canvas is over x px\n    //     //if (canvas.width > 100) {\n    //       var ctx = canvas.getContext(\"2d\");\n    \n    //       var MAIN_COLOR = \"#ffffff\",\n    //           MAIN_COLOR_RGB = convertHex(MAIN_COLOR,0.5),\n    //           SEC_COLOR = \"#ffffff\",\n    //           BORDER_COLOR = \"#ffffff\",\n    //           LINE_ALPHA = 100,\n    //           NUM_BALLS = 100, // higher is less\n    //           BALL_RAD = 6, //3\n    //           BALL_RAD_MIN = 2,\n    //           SPEED = 0.3,\n    //           GLOB_ALPHA = 0.5,\n    //           MOUSE_RAD = 100,\n    //           CONN_DIST = 100,\n    //           FPS = 60;\n    \n    //       var TAU = 2 * Math.PI;\n    \n    //       let times = [];\n    //       let requestId = '';\n    //       function loop() {\n    //         if (currentGlobalID === currentScopeID ) {\n    //           ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //           update();\n    //           draw();\n    //           requestId = requestAnimationFrame(loop);\n    //         }\n    //       }\n    \n    //       function stopAnimation(e) {\n    //           cancelAnimationFrame(requestId);\n    //       }\n    \n    //       function Ball (startX, startY, startVelX, startVelY) {\n    //         this.x = startX || Math.random() * canvas.width;\n    //         this.y = startY || Math.random() * canvas.height;\n    //         this.vel = {\n    //           x: startVelX || Math.random() * SPEED * 2 - SPEED,\n    //           y: startVelY || Math.random() * SPEED *2 - SPEED\n    //         };\n    //         this.update = function(canvas) {\n    //           if (this.x > canvas.width + 50 || this.x < -50) {\n    //             this.vel.x = -this.vel.x;\n    //           }\n    //           if (this.y > canvas.height + 50 || this.y < -50) {\n    //             this.vel.y = -this.vel.y;\n    //           }\n    //           this.x += this.vel.x;\n    //           this.y += this.vel.y;\n    //         };\n    //         this.draw = function(ctx, can) {\n    //           ctx.beginPath();\n    //           var distM = distMouse(this);\n    //           if (distM > MOUSE_RAD) {\n    //             ctx.fillStyle = MAIN_COLOR;\n    //             ctx.globalAlpha =  GLOB_ALPHA;\n    //             ctx.arc((0.5 + this.x) | 0, (0.5 + this.y) | 0, BALL_RAD_MIN, 0, TAU, false);\n    //           } else {\n    //             ctx.fillStyle = SEC_COLOR;\n    //             ctx.strokeStyle= BORDER_COLOR;\n    //             ctx.globalAlpha = 1;\n    //             var BALL_RAD_DYN = (distM > CONN_DIST ? BALL_RAD_MIN : BALL_RAD * (1 - distM / CONN_DIST))\n    //             ctx.arc((0.5 + this.x) | 0, (0.5 + this.y) | 0, BALL_RAD_DYN, 0, TAU, false);\n    //             ctx.stroke();\n    //           }\n    \n    //           ctx.fill();\n    //         }\n    //       }\n    \n    //       var balls = [];\n    //       for (var i = 0; i < canvas.width * canvas.height / (NUM_BALLS*NUM_BALLS); i++) {\n    //         balls.push(new Ball(Math.random() * canvas.width, Math.random() * canvas.height));\n    //       }\n    \n    //       var lastTime = Date.now();\n    //       function update() {\n    //         var diff = Date.now() - lastTime;\n    //         for (var frame = 0; frame * 16.6667 < diff; frame++) {\n    //           for (var index = 0; index < balls.length; index++) {\n    //             balls[index].update(canvas);\n    //           }\n    //         }\n    //         lastTime = Date.now();\n    //       }\n    //       var mouseX = -1e9, mouseY = -1e9;\n    //       document.addEventListener('mousemove', function(event) {\n    //         mouseX = event.clientX;\n    //         mouseY = event.clientY;\n    //       });\n    \n    //       function distMouse(ball) {\n    //         return Math.hypot(ball.x - mouseX, ball.y - mouseY);\n    //       }\n    \n    //       function draw() {\n    //         for (var index = 0; index < balls.length; index++) {\n    //           var ball = balls[index];\n    //           ctx.beginPath();\n    //           for (var index2 = balls.length - 1; index2 > index; index2 += -1) {\n    //             var ball2 = balls[index2];\n    //             var dist = Math.hypot(ball.x - ball2.x, ball.y - ball2.y);\n    //               if (dist < CONN_DIST) {\n    //                 var distM = distMouse(ball2);\n    //                 var line_alp = 1-(dist/CONN_DIST);\n    //                 if (distM > MOUSE_RAD) {\n    //                   ctx.strokeStyle = MAIN_COLOR;\n    //                   ctx.globalAlpha =  ctx.globalAlpha = 1 - (dist > CONN_DIST ? .8 : dist / CONN_DIST);\n    //                 } else {\n    //                   //ctx.fillStyle = 'rgba(255,0,0,1)';\n    \n    //                   ctx.strokeStyle = SEC_COLOR;\n    //                   ctx.globalAlpha = 1;\n    //                 }\n    //                 ctx.moveTo((0.5 + ball.x) | 0, (0.5 + ball.y) | 0);\n    //                 ctx.lineTo((0.5 + ball2.x) | 0, (0.5 + ball2.y) | 0);\n    //               }\n    //             }\n    //           ctx.stroke();\n    //           ball.draw(ctx, canvas);\n    //         }\n    //       }\n    \n    //       // Start\n    //       loop();\n    //     //}\n    //     var runNetworkAnimObj = new Object()\n    //     runNetworkAnimObj.stopAnimation = stopAnimation\n    //     return runNetworkAnimObj \n    //   }\n    //   let Multi = new runNetworkAnim();\n    \n    // });\n  }, []);\n\n  return (\n  <>\n    <GlobalStyles/>\n    <script\n      src=\"https://www.paypal.com/sdk/js?currency=BRL&client-id=AYrqjWQGJpRF3h0xRqck1VBpNzs-wW7VIMVs0gj9lbXDGQ6VWxXH1tqGkLKZNQ4LbX6bLvf6YcvLFemj\"> // Required. Replace SB_CLIENT_ID with your sandbox client ID.\n    </script>\n    <link href='https://fonts.googleapis.com/css?family=Lato:300,400|Montserrat:700' rel='stylesheet' type='text/css' />\n    <Component {...pageProps} />\n  </>\n  );\n}"]},"metadata":{},"sourceType":"module"}